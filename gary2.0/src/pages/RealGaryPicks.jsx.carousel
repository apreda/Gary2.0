import React, { useState, useEffect, useRef } from 'react';
import { Link } from "react-router-dom";
import { useUserStats } from "../hooks/useUserStats";
import { useUserPlan } from "../hooks/useUserPlan";
import ErrorBoundary from "../components/ErrorBoundary";
import gary1 from '../assets/images/gary1.svg';
import "./GaryPicksCarousel.css";

// Constants for Gary's responses
const GARY_RESPONSES = {
  ride: [
    "Nice. You rode with the Bear. Let's win this.",
    "Smart money rides with Gary. Good call.",
    "When Gary speaks, winners listen. Let's cash this.",
    "Gary approves your pick. Time to collect."
  ],
  fade: [
    "Bold move fading the Bear. Let's see how it plays out.",
    "Going against Gary? Interesting strategy.",
    "The Bear sees your fade. Respect for the conviction.",
    "Contrarian play noted. May the odds be in your favor."
  ]
};

// Mock data with game information
const mockPicks = [
  {
    id: 1,
    league: "NBA",
    game: "Celtics vs Bulls",
    moneyline: "Bulls -220",
    spread: "Celtics +3.5",
    overUnder: "Over 210.5",
    time: "7:10 PM ET",
    pickDetail: "Bulls are an absolute LOCK tonight. Do not fade me on this one, pal. Boston's defense is FULL of holes right now.",
    walletValue: "$150",
    confidenceLevel: 87,
    isPremium: false,
    betType: "Best Bet: Moneyline"
  },
  {
    id: 2,
    league: "NFL",
    game: "Patriots vs Giants",
    moneyline: "Patriots -150",
    spread: "Giants +4.0",
    overUnder: "Under 45.5",
    time: "8:30 PM ET",
    pickDetail: "Giants +4? Vegas is practically BEGGING you to take the Pats. Trust me, this line stinks worse than week-old fish. Giants cover EASY.",
    walletValue: "$200",
    confidenceLevel: 92,
    isPremium: true,
    betType: "Spread Pick"
  },
  {
    id: 3,
    league: "MLB",
    game: "Yankees vs Red Sox",
    moneyline: "Yankees -120",
    spread: "Red Sox +1.5",
    overUnder: "Over 8.5",
    time: "4:05 PM ET",
    pickDetail: "Yankees own the Red Sox this season. PERIOD. This is the closest thing to free money you'll ever see. I'm betting the house on this one.",
    walletValue: "$100",
    confidenceLevel: 78,
    isPremium: true,
    betType: "Total: Over/Under"
  },
  {
    id: 4,
    league: "PARLAY",
    game: "Parlay of the Day",
    moneyline: "",
    spread: "",
    overUnder: "",
    time: "All Day",
    pickDetail: "Today's three-leg parlay combines my highest conviction picks across leagues. This combination gives us a juicy +850 payout potential.",
    walletValue: "$50",
    confidenceLevel: 65,
    isPremium: true,
    betType: "3-Leg Parlay",
    parlayOdds: "+850"
  }
];

export function RealGaryPicks() {
  const [activeCardIndex, setActiveCardIndex] = useState(0);
  const [picks, setPicks] = useState([]);
  const [flippedCards, setFlippedCards] = useState({});
  const [userDecisions, setUserDecisions] = useState({});
  const [toastMessage, setToastMessage] = useState("");
  const [showToast, setShowToast] = useState(false);
  const carouselRef = useRef(null);
  const autoplayTimerRef = useRef(null);
  const { userPlan } = useUserPlan();
  const { updateStats } = useUserStats();
  const [betTracking, setBetTracking] = useState({
    betsWithGary: 0,
    betsAgainstGary: 0,
    totalBets: 0,
    currentStreak: 0,
    picks: []
  });

  // Initialize picks, flipped cards state, and load bet tracking
  useEffect(() => {
    setPicks(mockPicks);
    
    // Initialize flipped cards state
    const initialFlippedState = {};
    mockPicks.forEach(pick => {
      initialFlippedState[pick.id] = false;
    });
    setFlippedCards(initialFlippedState);
    
    // Load bet tracking from localStorage if available
    const savedBetTracking = localStorage.getItem('garyBetTracking');
    if (savedBetTracking) {
      setBetTracking(JSON.parse(savedBetTracking));
    }
    
    // Start autoplay
    startAutoplay();
    
    return () => {
      // Clear autoplay timer when component unmounts
      if (autoplayTimerRef.current) {
        clearTimeout(autoplayTimerRef.current);
      }
    };
  }, []);

  // Autoplay function
  const startAutoplay = () => {
    autoplayTimerRef.current = setTimeout(() => {
      rotateCarousel('next');
      startAutoplay();
    }, 5000); // Change card every 5 seconds
  };

  // Pause autoplay when user interacts
  const pauseAutoplay = () => {
    if (autoplayTimerRef.current) {
      clearTimeout(autoplayTimerRef.current);
    }
  };

  // Resume autoplay
  const resumeAutoplay = () => {
    pauseAutoplay();
    startAutoplay();
  };

  // Rotate carousel
  const rotateCarousel = (direction) => {
    setActiveCardIndex(prevIndex => {
      if (direction === 'next') {
        return (prevIndex + 1) % picks.length;
      } else {
        return (prevIndex - 1 + picks.length) % picks.length;
      }
    });
    pauseAutoplay();
    resumeAutoplay();
  };

  // Toggle card flip
  const toggleCardFlip = (pickId) => {
    // Check if premium pick and user doesn't have premium access
    const pick = picks.find(p => p.id === pickId);
    if (pick.isPremium && userPlan === 'free') {
      return; // Don't flip premium cards for free users
    }
    
    // Toggle flip state
    setFlippedCards(prev => ({
      ...prev,
      [pickId]: !prev[pickId]
    }));
    
    pauseAutoplay();
  };

  // Get a random response from Gary
  const getRandomResponse = (responseType) => {
    const responses = GARY_RESPONSES[responseType];
    return responses[Math.floor(Math.random() * responses.length)];
  };

  // Handle user betting decision
  const handleDecision = (pickId, decision) => {
    // Prevent handling duplicate decisions
    if (userDecisions[pickId] === decision) return;
    
    // Get the pick details
    const targetPick = picks.find(p => p.id === pickId);
    
    // Record user decision
    setUserDecisions(prev => ({
      ...prev,
      [pickId]: decision
    }));
    
    // Show toast message
    const responseMessage = getRandomResponse(decision);
    setToastMessage(responseMessage);
    setShowToast(true);
    
    // Hide toast after 3.5 seconds
    setTimeout(() => {
      setShowToast(false);
    }, 3500);
    
    // Update bet tracking
    setBetTracking(prev => {
      const newTracking = { ...prev };
      newTracking.totalBets += 1;
      
      if (decision === 'ride') {
        newTracking.betsWithGary += 1;
        newTracking.currentStreak = prev.currentStreak >= 0 ? prev.currentStreak + 1 : 1;
      } else {
        newTracking.betsAgainstGary += 1;
        newTracking.currentStreak = prev.currentStreak <= 0 ? prev.currentStreak - 1 : -1;
      }
      
      // Store pick details
      newTracking.picks.push({
        id: `${pickId}-${Date.now()}`,
        gameId: targetPick.id,
        game: targetPick.game,
        league: targetPick.league,
        garyPick: targetPick.betType === 'Best Bet: Moneyline' ? targetPick.moneyline : 
                  targetPick.betType === 'Spread Pick' ? targetPick.spread : 
                  targetPick.betType === 'Total: Over/Under' ? targetPick.overUnder : 
                  'Parlay',
        userDecision: decision,
        timestamp: new Date().toISOString(),
        result: 'pending' // Will be updated when game result is known
      });
      
      // Save to localStorage for persistence
      localStorage.setItem('garyBetTracking', JSON.stringify(newTracking));
      
      return newTracking;
    });
    
    // Update user stats via context
    updateStats(decision, pickId);
  };

  // Calculate position class for each card
  const getCardPositionClass = (index) => {
    const position = (index - activeCardIndex + picks.length) % picks.length;
    
    if (position === 0) return 'card-position-0';
    if (position === 1 || position === picks.length - 1) return position === 1 ? 'card-position-1' : 'card-position-3';
    return 'card-position-2';
  };

  return (
    <ErrorBoundary>
      <div className="picks-page-container">
        {/* Ambient glows */}
        <div className="ambient-glow ambient-glow-1"></div>
        <div className="ambient-glow ambient-glow-2"></div>
        
        {/* Carousel */}
        <div className="carousel-container">
          <div 
            className="carousel-track"
            ref={carouselRef}
          >
            {picks.map((pick, index) => (
              <div 
                key={pick.id}
                className={`pick-card ${pick.id === 4 ? 'parlay-card' : ''} ${getCardPositionClass(index)} ${flippedCards[pick.id] ? 'pick-card-flipped' : ''}`}
                onClick={() => toggleCardFlip(pick.id)}
              >
                <div className="pick-card-inner">
                  {/* Front of card */}
                  <div className="pick-card-front">
                    <div className="pick-card-header">
                      <div className={pick.id === 4 ? 'parlay-badge' : 'pick-card-league'}>
                        {pick.league}
                      </div>
                      <div className="pick-card-matchup">{pick.game}</div>
                      <div className="pick-card-time">{pick.time}</div>
                    </div>
                    
                    <div className="pick-card-content">
                      <div className="pick-card-bet-type">{pick.betType}</div>
                      <div className="pick-card-bet">
                        {pick.id === 4 ? pick.parlayOdds : 
                         pick.betType === 'Best Bet: Moneyline' ? pick.moneyline : 
                         pick.betType === 'Spread Pick' ? pick.spread : pick.overUnder}
                      </div>
                      
                      <div className="confidence-container">
                        <div className="confidence-label">
                          <span>Gary's Confidence</span>
                          <span>{pick.confidenceLevel}%</span>
                        </div>
                        <div className="confidence-bar">
                          <div 
                            className="confidence-fill" 
                            style={{ width: `${pick.confidenceLevel}%` }}
                          ></div>
                        </div>
                      </div>
                    </div>
                    
                    <div className="pick-card-actions">
                      <button className="btn-view-pick">
                        View Pick
                      </button>
                    </div>
                  </div>
                  
                  {/* Back of card */}
                  <div className="pick-card-back">
                    <div className="pick-card-header">
                      <div className={pick.id === 4 ? 'parlay-badge' : 'pick-card-league'}>
                        {pick.league}
                      </div>
                      <div className="pick-card-matchup">{pick.game}</div>
                      <div className="pick-card-time">{pick.time}</div>
                    </div>
                    
                    <div className="gary-analysis">
                      <div className="gary-analysis-label">Gary's Analysis</div>
                      <div className="gary-analysis-content">
                        {pick.pickDetail}
                      </div>
                    </div>
                    
                    <div className="pick-card-actions">
                      <div className="decision-actions">
                        <button 
                          className="btn-decision btn-ride"
                          onClick={(e) => {
                            e.stopPropagation();
                            handleDecision(pick.id, 'ride');
                          }}
                        >
                          Bet with Gary
                        </button>
                        <button 
                          className="btn-decision btn-fade"
                          onClick={(e) => {
                            e.stopPropagation();
                            handleDecision(pick.id, 'fade');
                          }}
                        >
                          Fade the Bear
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
                
                {/* Premium lock overlay */}
                {pick.isPremium && userPlan === 'free' && (
                  <div className="premium-lock-overlay">
                    <div className="premium-badge">Premium</div>
                    <h3 className="premium-lock-title">Unlock Gary's Premium Pick</h3>
                    <p className="premium-lock-desc">Gain access to all of Gary's premium picks with a Pro subscription.</p>
                    <Link to="/pricing">
                      <button className="btn-upgrade">Upgrade Now</button>
                    </Link>
                  </div>
                )}
              </div>
            ))}
          </div>
          
          {/* Carousel navigation */}
          <button 
            className="carousel-arrow carousel-arrow-left"
            onClick={() => rotateCarousel('prev')}
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <path d="M15 18l-6-6 6-6" />
            </svg>
          </button>
          
          <button 
            className="carousel-arrow carousel-arrow-right"
            onClick={() => rotateCarousel('next')}
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <path d="M9 18l6-6-6-6" />
            </svg>
          </button>
          
          <div className="carousel-nav">
            {picks.map((_, index) => (
              <div 
                key={index}
                className={`carousel-nav-item ${index === activeCardIndex ? 'active' : ''}`}
                onClick={() => {
                  setActiveCardIndex(index);
                  pauseAutoplay();
                  resumeAutoplay();
                }}
              ></div>
            ))}
          </div>
        </div>
        
        {/* Toast notification */}
        {showToast && (
          <div className="toast-container">
            <div className="toast-message">
              {toastMessage}
            </div>
          </div>
        )}
      </div>
    </ErrorBoundary>
  );
}
