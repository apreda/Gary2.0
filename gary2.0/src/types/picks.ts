/**
 * Type definitions for the pick generation system
 */

export type Sport = 'NBA' | 'MLB' | 'NHL' | 'NFL' | 'SOCCER' | string;
export type PickType = 'moneyline' | 'spread';
export type PickStatus = 'pending' | 'win' | 'loss' | 'push' | 'no_contest';

/**
 * Represents a betting pick generated by the system
 */
export interface Pick {
  /** Unique identifier for the pick */
  id: string;
  
  /** Sport identifier (e.g., 'NBA', 'MLB') */
  sport: Sport;
  
  /** League identifier */
  league: string;
  
  /** Date and time of the game in ISO format */
  game_date: string;
  
  /** Home team name */
  home_team: string;
  
  /** Away team name */
  away_team: string;
  
  /** Type of bet (moneyline or spread) */
  pick_type: PickType;
  
  /** Team to bet on */
  pick_team: string;
  
  /** Point spread value (if applicable) */
  pick_value?: number;
  
  /** Confidence score (1-100) */
  confidence: number;
  
  /** Current odds (e.g., -110, +150) */
  odds: number;
  
  /** Detailed analysis of the pick */
  analysis: string;
  
  /** Key metrics that influenced this pick */
  key_metrics?: Record<string, any>;
  
  /** Current status of the pick */
  status: PickStatus;
  
  /** When the pick was created */
  created_at: string;
  
  /** When the pick was last updated */
  updated_at: string;
  
  /** Additional metadata */
  metadata?: Record<string, any>;
}

/**
 * Represents a user's notification preferences
 */
export interface UserSettings {
  /** User ID from auth.users */
  user_id: string;
  
  /** Whether to send email notifications */
  email_notifications: boolean;
  
  /** Whether to send push notifications */
  push_notifications: boolean;
  
  /** Notification preferences */
  notification_preferences: {
    [key: string]: boolean;
  };
  
  /** Whether the user is active */
  active: boolean;
  
  /** When the settings were created */
  created_at: string;
  
  /** When the settings were last updated */
  updated_at: string;
  
  /** Additional metadata */
  metadata?: Record<string, any>;
}

/**
 * Represents a notification sent to a user
 */
export interface Notification {
  /** Unique identifier */
  id: string;
  
  /** User ID from auth.users */
  user_id: string;
  
  /** Notification type */
  type: string;
  
  /** Notification title */
  title: string;
  
  /** Notification content */
  content: string;
  
  /** Whether the notification has been read */
  read: boolean;
  
  /** When the notification was marked as read */
  read_at?: string;
  
  /** Additional metadata */
  metadata?: Record<string, any>;
  
  /** When the notification was created */
  created_at: string;
}

/**
 * Represents a webhook configuration
 */
export interface Webhook {
  /** Unique identifier */
  id: string;
  
  /** Webhook name */
  name: string;
  
  /** Webhook URL */
  url: string;
  
  /** Event type that triggers the webhook */
  event_type: string;
  
  /** API key for authentication (if required) */
  api_key?: string;
  
  /** Whether the webhook is active */
  active: boolean;
  
  /** When the webhook was created */
  created_at: string;
  
  /** When the webhook was last updated */
  updated_at: string;
  
  /** Additional metadata */
  metadata?: Record<string, any>;
}

/**
 * Type guard for Pick
 */
export function isPick(obj: any): obj is Pick {
  return (
    obj &&
    typeof obj.id === 'string' &&
    typeof obj.sport === 'string' &&
    typeof obj.league === 'string' &&
    typeof obj.game_date === 'string' &&
    typeof obj.home_team === 'string' &&
    typeof obj.away_team === 'string' &&
    (obj.pick_type === 'moneyline' || obj.pick_type === 'spread') &&
    typeof obj.pick_team === 'string' &&
    (typeof obj.pick_value === 'number' || obj.pick_value === undefined) &&
    typeof obj.confidence === 'number' &&
    typeof obj.odds === 'number' &&
    typeof obj.analysis === 'string' &&
    (typeof obj.key_metrics === 'object' || obj.key_metrics === undefined) &&
    ['pending', 'win', 'loss', 'push', 'no_contest'].includes(obj.status) &&
    typeof obj.created_at === 'string' &&
    typeof obj.updated_at === 'string'
  );
}
